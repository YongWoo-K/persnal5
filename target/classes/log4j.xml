<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="sample.spring.kyw">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<!-- 가능한 많은 정보가 나오는 것이 개발에 수월하기에 가장 낮은 레벨인 debug모드로 변경 -->
		<priority value="debug" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>

<!-- 
자바기반 로깅 유틸리티 : 디버그용 도구로 주로 사용
	- 개발자가 로그문의 출력을 선택해서 할 수 있도록 도와주는 도구
	- log4j의 구조
		- Logger : 로그파일을 작성하는 클래스, Appender에 메세지 전달
		- Appender : 로그를 출력하는 위치를 결정(파일, 콘솔, db 등)
	- 단계 : DEBUG -> INFO -> WARN -> ERROR -> FETAL
		1. DEBUG : 어플리케이션의 내부 실행 상황을 추적할 수 있는 상세정보
		2. INFO : 어플리케이션의 주요 실행 정보
		3. WARN : 잠재적 위험상태 경고
		4. ERROR : 오류 발생했지만 어플리케이션 실행은 가능한 상태
		5. FETAL : 어플리케이션을 중지해야 할 심각한 오류
	- log4j 설정은 pom.xml 라이브러리에 추가
 -->